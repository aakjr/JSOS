{
    "name": "/",
    "type": "directory",
    "contents": [
        {
            "name": "init",
            "type": "file",
            "contents": "globalThis.kernel_init = async () => { globalThis.processes = []; globalThis.processes.push({ 'pid': '1', 'location': '/init' } ); globalThis.mps = []; globalThis.mps.push({ 'on': '/', 'src': name } ); if (typeof (fs) == 'object' && fs.contents) { if (typeof(document) == 'object') { document.body.innerHTML += 'Loading essential libraries'; } else { console.log('Loading essential libraries') } const slashlib = fs.contents.find(obj => obj.name == 'lib' && obj.type == 'directory'); if (slashlib) { if (typeof(document) == 'object') document.body.innerHTML += ` (/lib)`; const loadlibf = slashlib.contents.find(obj => obj.name == 'libloadlib' && obj.type == 'file'); if (loadlibf) { eval(loadlibf.contents); const stdoutf = slashlib.contents.find(obj => obj.name == 'libstdout' && obj.type == 'file'); if (stdoutf) loadlib('/lib/libstdout'); try { const libraries = slashlib.contents; for (const library of libraries) { try { eval(library.contents); stdout(`Loaded ${library.name}`, 0); } catch (err) { stdout(`Failed to load '${library.name}`, 1); } } stdout('Loaded essential libraries', 0); stdout('Loading Shell'); const slashbin = fs.contents.find(obj => obj.name == 'bin' && obj.type == 'directory'); if (slashbin) { const jsh = slashbin.contents.find(obj => obj.name == 'sh' && obj.type == 'file'); if (jsh) { eval(jsh.contents); globalThis.processes.push({ 'pid': globalThis.nextpid(), 'location': '/bin/sh' } ); stdout('Shell loaded\\n', 0); } else { stdout('Shell missing (/bin/sh not found)', 2); return; } } else { return stdout('Binaries directory missing (/bin not found)', 2); } } catch (err) { return stdout(`Error loading essential libraries: ${err}`, 2); } } } else { if (typeof(document) == 'object') { document.innerHTML += `[<span class='f'>!</span>] Libraries directory missing (/lib not found)`; } else { console.log(`[!] Libraries directory missing (/lib not found)`); } return; } } else { if (typeof(document) == 'object') { document.innerHTML += `[<span class='f'>!</span>] Filesystem error`; } else { console.log(`[!] Filesystem error`); } return; } }"
        },
        {
            "name": "bin",
            "type": "directory",
            "contents": [
                {
                    "name": "clear",
                    "type": "file",
                    "contents": "document.body.innerHTML = null; "
                },
                {
                    "name": "reboot",
                    "type": "file",
                    "contents": "globalThis.location.reload(); "
                },
                {
                    "name": "alias",
                    "type": "file",
                    "contents": "switch(args.length) {case 0: ALIASES.forEach(alias => { stdout(`${alias.alias}='${alias.ref}'\\n`); }); break; case 1: if(ALIASES.findIndex(obj => obj.alias == args[0]) == -1) {break; } let obj = ALIASES[ALIASES.findIndex(obj => obj.alias == args[0])]; stdout(`${obj.alias}='${obj.ref}'`); break; default: ALIASES.push({ alias: args[0], ref: args.slice(1).join(' ') }); }"
                },
                {
                    "name": "echo",
                    "type": "file",
                    "contents": "stdout(args.join(' ')); "
                },
                {
                    "name": "pwd",
                    "type": "file",
                    "contents": "stdout(PWD); "
                },
                {
                    "name": "mount",
                    "type": "file",
                    "contents": "switch(args.length) {case 0: stdout(globalThis.mps.map(mp => `${mp.src} on ${mp.on}`).join('\\n')); break; }"
                },
                {
                    "name": "jbm",
                    "type": "file",
                    "contents": "switch (args[0] ? args[0].trim() : '') {case '': case 'help': stdout('-Version:\\njbl 1.0\\n\\n-Operations:\\nupdate [file] - update the boot configuration, default file: /etc/jbl/boot\\nhelp - print this message');break;case 'update': loadlib('/usr/lib/libpcg');let config_file = args[1] || '/etc/jbl/boot';if (doesExist(findRelativePath(config_file), 'file').exists) {stdout(`Updating JBL from ${config_file}`);try {let opts = { title: 'JBL - JSOS Boot Loader', timeout: 5 }, res = {}, configs = parseConfiguration(pathToNode(findRelativePath(config_file)).contents);configs.forEach(config => {if (opts.hasOwnProperty(config.name)) {stdout(`Setting '${config.name}' to '${config.value}'`);opts[config.name] = config.value;}else {stdout(`Unknown option '${config.name}', skipping`);}});res = opts;stdout('Looking for entries (bootable filesystems)');let fss = [];let i = 0;while (localStorage.getItem(`ls${i}`)) {fss.push(`ls${i}`);stdout(`added boot entry for ls${i}`);i++;};res.entries = fss;localStorage.setItem('bootConfig', JSON.stringify(res));stdout(`Updated JBL from ${config_file} successfully`);}catch (error) {stdout(`Error updating JBL from ${config_file}: ${error}`);}}else {stdout(doesExist(findRelativePath(config_file), 'file').message);}break;default: stdout(`${args[0]}: invalid operation`);}"
                },
                {
                    "name": "exit",
                    "type": "file",
                    "contents": "globalThis.processes.splice(globalThis.processes.findIndex(process => process.location === '/bin/sh'), 1); "
                },
                {
                    "name": "ls",
                    "type": "file",
                    "contents": "switch (args.length) { case 0: stdout(pathToNode(PWD).contents.map(obj => obj.name).join(' ')); break; case 1: if (doesExist(findRelativePath(args[0]), 'directory').exists) { stdout(pathToNode(findRelativePath(args[0])).contents.map(obj => obj.name).join(' ')); } else { stdout(doesExist(findRelativePath(dir), 'directory').message); } break; case2: args.forEach(dir => { if (doesExist(findRelativePath(dir), 'directory').exists) { stdout(`\\n\\n${dir}:\\n` + pathToNode(findRelativePath(dir)).contents.map(obj => obj.name).join(' ')) } else { stdout(doesExist(findRelativePath(dir), 'directory').message); } }); }; "
                },
                {
                    "name": "cd",
                    "type": "file",
                    "contents": "if (args.length == 0) { args.push(homedir); } if(doesExist(findRelativePath(args[0]), 'directory').exists) {PWD = findRelativePath(args[0]); } else {stdout(doesExist(findRelativePath(args[0]), 'directory').message); }"
                },
                {
                    "name": "cat",
                    "type": "file",
                    "contents": "if(doesExist(findRelativePath(args[0]), 'file').exists) {stdout(pathToNode(findRelativePath(args[0])).contents); } else {stdout(doesExist(findRelativePath(args[0]), 'file').message); }"
                },
                {
                    "name": "touch",
                    "type": "file",
                    "contents": "args.forEach(file => { if(!doesExist(findRelativePath(file)).exists) { if (doesExist(parentDirOf(findRelativePath(file)), 'directory').exists) {if(!doesExist(findRelativePath(file), 'file').exists) {pathToNode(parentDirOf(findRelativePath(file))).contents.push({ name: fileOfPath(file), type: 'file', contents: '' })}} else {stdout(doesExist(parentDirOf(findRelativePath(file)), 'directory').message); } } })"
                },
                {
                    "name": "nano",
                    "type": "file",
                    "contents": "loadlib('/usr/lib/libnano'); setTimeout(() => { globalThis.removeEventListener('keydown', globalThis.shreturn);});if (!args[0]) { stdout('Provide file name'); setTimeout(() => { globalThis.addEventListener('keydown', globalThis.shreturn); });}else { if (doesExist(parentDirOf(findRelativePath(args[0])), 'directory').exists) { document.body.style.overflowY = 'hidden'; globalThis.removeEventListener('click', focuslastinp); const inputarea = document.createElement('textarea'); inputarea.innerText = doesExist(findRelativePath(args[0]), 'file').exists ? pathToNode(findRelativePath(args[0])).contents : ''; inputarea.className = 'texteditor'; document.body.appendChild(inputarea); setTimeout(() => { globalThis.scrollTo(0, 0); document.querySelector('.texteditor').focus(); }); globalThis.addEventListener('keydown', function handleTextEditorShortcuts(keyE) { if (keyE.ctrlKey && keyE.key === 's') { keyE.preventDefault(); if (!doesExist(findRelativePath(args[0]), 'file').exists) { pathToNode(parentDirOf(findRelativePath(args[0]))).contents.push({ name: fileOfPath(args[0]), type: 'file', contents: document.querySelector('.texteditor').value }); } else { pathToNode(findRelativePath(args[0])).contents = document.querySelector('.texteditor').value; } } if (keyE.key === 'Escape' || keyE.key === 'GoBack') { keyE.preventDefault(); globalThis.removeEventListener('keydown', handleTextEditorShortcuts); globalThis.addEventListener('click', focuslastinp); document.body.removeChild(inputarea); document.body.innerHTML += '\\n'; document.body.style.overflowY = 'auto'; focuslastinp(); setTimeout(() => { globalThis.addEventListener('keydown', globalThis.shreturn); }); } }); } else { stdout(doesExist(parentDirOf(findRelativePath(args[0])), 'directory').message); setTimeout(() => { globalThis.addEventListener('keydown', globalThis.shreturn); }); }}"
                },
                {
                    "name": "mkdir",
                    "type": "file",
                    "contents": "args.forEach(directory => { if (!doesExist(findRelativePath(directory)).exists) { if(doesExist(parentDirOf(findRelativePath(directory)), 'directory').exists) {if(!doesExist(findRelativePath(directory), 'directory').exists) {pathToNode(parentDirOf(findRelativePath(directory))).contents.push({name: fileOfPath(directory), type: 'directory', contents: [] })}} else {stdout(doesExist(parentDirOf(findRelativePath(directory)), 'directory').message); } } })"
                },
                {
                    "name": "rm",
                    "type": "file",
                    "contents": "args.forEach(file => { if(doesExist(parentDirOf(findRelativePath(file)), 'directory').exists) {if(doesExist(findRelativePath(file), 'any').exists) {pathToNode(parentDirOf(findRelativePath(file))).contents.splice([pathToNode(parentDirOf(findRelativePath(file))).contents.findIndex(obj => obj.name == fileOfPath(file) && obj.type == pathToNode(findRelativePath(file)).type)], 1); } else {stdout(doesExist(findRelativePath(file), 'any').message); }} })"
                },
                {
                    "name": "cp",
                    "type": "file",
                    "contents": "if(doesExist(findRelativePath(args[0]), 'any').exists) {if(doesExist(parentDirOf(findRelativePath(args[1])), 'directory').exists) {pathToNode(parentDirOf(findRelativePath(args[1]))).contents.push({name: fileOfPath(args[1]), type: pathToNode(findRelativePath(args[0])).type, contents: pathToNode(findRelativePath(args[0])).contents }); } else {stdout(doesExist(parentDirOf(findRelativePath(args[1])), 'directory').message); }} else {stdout(doesExist(findRelativePath(args[0]), 'any').message); }"
                },
                {
                    "name": "mv",
                    "type": "file",
                    "contents": "if(doesExist(findRelativePath(args[0]), 'any').exists) {if(doesExist(parentDirOf(findRelativePath(args[1])), 'directory').exists) {pathToNode(parentDirOf(findRelativePath(args[1]))).contents.push({name: fileOfPath(args[1]), type: pathToNode(findRelativePath(args[0])).type, contents: pathToNode(findRelativePath(args[0])).contents }); pathToNode(parentDirOf(findRelativePath(args[0]))).contents.splice([pathToNode(parentDirOf(findRelativePath(args[0]))).contents.findIndex(obj => obj.name == fileOfPath(args[0]) && obj.type == pathToNode(findRelativePath(args[0])).type)], 1); } else {stdout(doesExist(parentDirOf(findRelativePath(args[1])), 'directory').message); }} else {stdout(doesExist(findRelativePath(args[0]), 'any').message); }"
                },
                {
                    "name": "js",
                    "type": "file",
                    "contents": "try { stdout(eval(args.join(' '))) } catch (e) { stdout(e) }"
                },
                {
                    "name": "jpm",
                    "type": "file",
                    "contents": "switch (args[0] ? args[0].trim() : '') {case '': case 'help': stdout('-Version:\\njpm 0.1\\n\\n-Operations:\\nupdate\\ninstall <package>\\nhelp');break;case 'update': {if (!doesExist('/etc/jpm/sources.list', 'file').exists) { stdout(`Cannot read source list at /etc/jpm/sources.list: ${doesExist('/etc/jpm/sources.list', 'file').message}`, 2); break; }loadlib('/usr/lib/libpcg');const sources = parseConfiguration(pathToNode('/etc/jpm/sources.list').contents);stdout(JSON.stringify(sources));let pkgsInfo = [];for (let source of sources) {const url = source.name;try {fetch(url).then(response => response.json()).then(data => pkgsInfo.push(data));} catch (error) {console.error(`Error reaching source ${source}: ${error}`);}}if (doesExist('/etc/jpm/pkgs.json', 'file').exists) {const pkgsFileNode = pathToNode('/etc/jpm/pkgs.json');pkgsFileNode.contents = JSON.stringify(pkgsInfo);stdout('Packages updated in /etc/jpm/pkgs.json');} else {stdout('Error: /etc/jpm/pkgs.json file not found');} break; default: stdout(`${args[0]}: invalid operation`);break;}"
                },
                {
                    "name": "sh",
                    "type": "file",
                    "contents": "document.styleSheets[0].insertRule('.input{ outline: none; color: white; }'); shvars = [{ 'name': 'USER', 'value': 'root' }, { 'name': 'HOST', 'value': (globalThis.location.host ? globalThis.location.host : 'localhost') }, { 'name': 'PWD', 'value': '' }, { 'name': 'PATH', 'value': '/bin:/usr/bin' }, { 'name': 'HOME', 'value': '' }, { 'name': 'ALIASES', 'value': 'quit=exit' } ]; globalThis.shfvars = [{ name: '~', 'value': 'shvars[shvars.findIndex(shvar => shvar.name === `HOME`)].value' }, { 'name': './', 'value': 'shvars[shvars.findIndex(shvar => shvar.name === `PWD`)].value + \\'/\\'' }]; loadlib('/usr/lib/libdoese'); loadlib('/usr/lib/libpdo'); loadlib('/usr/lib/libfop'); loadlib('/lib/libsh'); setTimeout(() => { let usershvar = shvars[shvars.findIndex(shvar => shvar.name === `USER`)]; let homedirshvar = shvars[shvars.findIndex(shvar => shvar.name === `HOME`)]; homedirshvar.value = (usershvar.value === 'root' ? '/root' : `/home/${usershvar.value}`); shvars[shvars.findIndex(shvar => shvar.name === `PWD`)].value = homedirshvar.value; NewCommandLine(); focuslastinp(); globalThis.addEventListener('click', focuslastinp); }); globalThis.addEventListener('keydown', globalThis.shreturn);"
                }
            ]
        },
        {
            "name": "lib",
            "type": "directory",
            "contents": [
                {
                    "name": "libstdout",
                    "type": "file",
                    "contents": "globalThis.stdout = (output = '', mode = null) => { const prefix = `${mode === 0 ? '[<span class=\\'t\\'>+</span>] ' : (mode === 1 ? '[<span class=\\'n\\'>-</span>] ' : (mode === 2 ? '[<span class=\\'f\\'>!</span>] ' : ''))}`; const cleanPrefix = `${mode === 0 ? '[+] ' : (mode === 1 ? '[-] ' : (mode === 2 ? '[!] ' : ''))}`; if (typeof(document) == 'object') { const div = document.createElement('div'); div.innerHTML = prefix; document.body.appendChild(div); div.append(output); } else { console.log(`${cleanPrefix}${output}`); } }"
                },
                {
                    "name": "libptn",
                    "type": "file",
                    "contents": "globalThis.pathToNode = (fullpath) => {; if (fullpath == '/') { return fs; } if (fullpath.endsWith('/')) { fullpath = fullpath.slice(0, -1); } var res = 'fs'; var pathsegs = fullpath.split('/').slice(1); pathsegs.forEach((step, index) => { if (step.trim() == '') { return res = 'undefined'; } if (step == '..') { if (index == 0) { return res = 'undefined'; } else { res = res.split('.').slice(0, -1).join('.'); } } else { if (typeof(eval(res)) == 'undefined') return res = 'undefined'; if (index == pathsegs.length - 1) { res += `.contents[${eval(res).contents.findIndex(obj => obj.name == step)} ]`; } else { res += `.contents[${eval(res).contents.findIndex(obj => obj.name == step && obj.type == 'directory')} ]`; } } if (typeof(eval(res)) == 'undefined') { res = 'undefined'; return; } } ); return eval(res); }"
                },
                {
                    "name": "libloadlib",
                    "type": "file",
                    "contents": "globalThis.loadlib = (lib_name) => { try { eval(pathToNode(lib_name).contents); } catch (err) { return err; } return true; }"
                },
                {
                    "name": "libsh",
                    "type": "file",
                    "contents": "NewCommandLine = () => { Array.from(document.getElementsByClassName('input')).forEach(input => input.contentEditable = 'false'); const newline = document.createElement('span'); newline.className = 'input'; newline.contentEditable = 'true'; const marker = document.createElement('label'); marker.innerHTML = shvars.find(shvar => shvar.name === 'USER').value === 'root' ? `# ` : `$ `; document.body.appendChild(marker); document.body.appendChild(newline); document.body.appendChild(document.createElement('br')); }; focuslastinp = () => { var inputs = document.getElementsByClassName('input'); if (inputs.length == 0) { NewCommandLine(); } inputs = document.getElementsByClassName('input'); const lastinput = inputs[inputs.length - 1]; lastinput.focus(); moveCursorToEnd(lastinput); document.body.scrollTo(0, document.body.scrollHeight); }; moveCursorToEnd = (element) => { var range = document.createRange(); var selection = globalThis.getSelection(); range.selectNodeContents(element); range.collapse(false); selection.removeAllRanges(); selection.addRange(range); }; HandleCommand = async (stdin) => { if (!stdin.trim()) return ''; const [cmd, ...args] = stdin.trim().split(/\\s+/); const loadShVars = () => { let code = ''; shvars.forEach(shvar => { code += `${shvar.name} = '${shvar.value}';\\n`; }); eval(code); }; const saveShVars = () => { let code = ''; shvars.forEach((shvar, i) => { code += `shvars[${i}].value = ${shvar.name};\\n`; }); eval(code); }; const parseAliases = (ALIASES) => { return ALIASES.split(':').filter(Boolean).map(aliasplain => { const [alias, ...ref] = aliasplain.split('='); return { alias, ref: ref.join('=') }; }); }; loadShVars(); if (cmd.includes('/')) { const relPath = findRelativePath(cmd); const fileCheck = doesExist(relPath, 'file'); if (!fileCheck.exists) { stdout(`command not found: ${cmd}`); return; } try { eval(pathToNode(relPath).contents); } catch (err) { stdout(`[${relPath}:${err.lineNumber}:${err.columnNumber}] ${err.message}`); } saveShVars(); return; } let aliasesArr = parseAliases(ALIASES); const matchingAlias = aliasesArr.find(obj => obj.alias === cmd); if (matchingAlias) { return HandleCommand(`${matchingAlias.ref} ${args.join(' ')}`.trim()); } const pathArr = PATH.split(':'); let foundPath = null; for (const path of pathArr) { const fullPath = `${path}/${cmd}`; if (doesExist(fullPath, 'file').exists) { foundPath = fullPath; break; } } if (!foundPath) { stdout(`command not found: ${cmd}`); return; } try { eval(pathToNode(foundPath).contents); } catch (err) { stdout(`[${foundPath}:${err.lineNumber}:${err.columnNumber}] ${err.message}`); } saveShVars(); }; parseVars = (string) => { let res = string.replaceAll(/\\$\\w+/g, (match) => { let shvar = shvars.find(shvar => shvar.name === match.slice(1)); if (!shvar) { return ''; } else { return shvar.value; } }).replaceAll(/\\$\\{\\w +\\}/g, (match) => { let shvar = shvars.find(shvar => shvar.name === match.slice(2, match.length - 1)); if (!shvar) { return ''; } else { return shvar.value; } }); globalThis.shfvars.forEach(fvar => { res = res.replaceAll(fvar.name, globalThis.eval(fvar.value)); }); return res; }; findRelativePath = (path) => { if (!path) { return PWD; } if (path == '/') { return '/'; } if (path.endsWith('/')) { path = path.slice(0, -1); } let res = (PWD == '/' ? PWD : path.startsWith('/') ? '' : PWD + '/') + path; const segments = res.split('/'); const stack = []; segments.forEach(segment => { if (segment === '..') { stack.pop(); } else if (segment !== '.' && segment !== '') { stack.push(segment); } }); res = '/' + stack.join('/'); if (res == '') { res = '/'; } return res; }; shreturn = async (event) => { if (event.key === 'Enter') { event.preventDefault(); let commands = event.target.innerText.split('&'); globalThis.removeEventListener('keydown', shreturn); await commands.forEach(command => { HandleCommand(parseVars(command)); stdout('\\n'); }); if (globalThis.processes.find(process => process.location === '/bin/sh')) { globalThis.addEventListener('keydown', shreturn); } NewCommandLine(); focuslastinp(); } };"
                },
                {
                    "name": "libsha256",
                    "type": "file",
                    "contents": "sha256 = async (input) => { const encoder = new TextEncoder(); const data = encoder.encode(input); const hashBuffer = await crypto.subtle.digest('SHA-256', data); const hashArray = Array.from(new Uint8Array(hashBuffer)); const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join(''); return hashHex; }"
                },
                {
                    "name": "libnextpid",
                    "type": "file",
                    "contents": "globalThis.nextpid = () => {var highestpid = 1; globalThis.processes.forEach(process => {if (process.pid > highestpid) {highestpid = process.pid; }}); return highestpid + 1; }"
                },
                {
                    "name": "libdoese",
                    "type": "file",
                    "contents": "globalThis.doesExist = (file, type) => { if (!file) { return { exists: false, message: 'Specify a file or directory' }; } if (file.endsWith('/') && file !== '/') { file = file.slice(0, -1); } if (!pathToNode(file)) { return { exists: false, message: `${file}: No such file or directory` }; } if (type !== 'file' && type !== 'directory') { return { exists: true, message: '' }; } if (type === eval(pathToNode(file)).type) { return { exists: true, message: '' }; } else if (type === 'file') { return { exists: false, message: `${file}: is a directory` }; } else { return { exists: false, message: `${file}: is not a directory` }; } }"
                },
                {
                    "name": "libpdo",
                    "type": "file",
                    "contents": "globalThis.parentDirOf = (file) => {return file.split('/').slice(0, -1).join('/') == '' ? '/' : file.split('/').slice(0, -1).join('/'); }"
                },
                {
                    "name": "libfop",
                    "type": "file",
                    "contents": "fileOfPath = (path) => { let pathSegmentsLength = path.split('/').length; return path.split('/')[pathSegmentsLength - 1] }"
                }
            ]
        },
        {
            "name": "usr",
            "type": "directory",
            "contents": [
                {
                    "name": "bin",
                    "type": "directory",
                    "contents": []
                },
                {
                    "name": "lib",
                    "type": "directory",
                    "contents": [
                        {
                            "name": "libpcg",
                            "type": "file",
                            "contents": "parseConfiguration = (configuration) => { let res = []; let opts = configuration.split('\\n').filter(opt => !opt.startsWith('#') && !!opt); opts.forEach(opt => res.push({name: opt.split('=')[0], value: opt.split('=')[1]})); return res; }"
                        },
                        {
                            "name": "libnano",
                            "type": "file",
                            "contents": "if (!Array.from(document.styleSheets[0].cssRules).find(obj => obj.selectorText === '.texteditor')) {document.styleSheets[0].insertRule('.texteditor { width: 100vw; height: 100vh; margin: 0; border: none; resize: none; background: inherit; outline: none; color: inherit; font: inherit; overflow-wrap: anywhere; top: 0; left: 0; position: fixed; }');}"
                        }
                    ]
                }
            ]
        },
        {
            "name": "etc",
            "type": "directory",
            "contents": [
                {
                    "name": "jpm",
                    "type": "directory",
                    "contents": [
                        {
                            "name": "pkgs.json",
                            "type": "file",
                            "contents": ""
                        },
                        {
                            "name": "sources.list",
                            "type": "file",
                            "contents": "# sources (mirrors) for JPM - JSOS Package Manager to use\nhttps://jpm.sliceofyou.org"
                        }
                    ]
                },
                {
                    "name": "jbl",
                    "type": "directory",
                    "contents": [
                        {
                            "name": "boot",
                            "type": "file",
                            "contents": "timeout=5\ntitle=JBL - Welcome to JSOS"
                        }
                    ]
                }
            ]
        },
        {
            "name": "root",
            "type": "directory",
            "contents": []
        }
    ]
}
